/*Ejercicio 2
Consultar el código de empleado y el número de clientes al que atiende cada 
empleado que es representante de ventas. Las cabeceras serán respectivamente 
“Código del Empleado” y “Clientes que atiende”,que tambien salga el nombre y aquellos que no han atendido a clientes*/

SELECT E.CodigoEmpleado AS "CODIGO DEL EMPLEADO", E.NOMBRE AS "NOMBRE DEL EMPLEADO", COUNT (C.CODIGOCLIENTE) AS "CLIENTES QUE ATIENDE"
FROM CLIENTES C, EMPLEADOS E
WHERE C.CODIGOEMPLEADOREPVENTAS(+) = E.CODIGOEMPLEADO
AND UPPER(E.PUESTO) = 'REPRESENTANTE VENTAS'
GROUP BY E.CODIGOEMPLEADO,E.NOMBRE
ORDER BY E.CODIGOEMPLEADO;
--Ejercicio 2.1(HACER UN TRIGGER PARA QUE SOLO LOS REP VENTAS PUEDAN INSERTAR)

/*Ejercicio 3
Listar el nombre de los clientes que hayan hecho pedidos en 2008.*/

SELECT DISTINCT C.NOMBRECLIENTE
FROM CLIENTES C, PEDIDOS P
WHERE C.CODIGOCLIENTE = P.CODIGOCLIENTE
AND P.FECHAPEDIDO BETWEEN TO_DATE('2008/01/01','YYYY/MM/DD')AND(TO_DATE('2008/12/31','YYYY/MM/DD'));
--CON SUBCONSULTA
SELECT NOMBRECLIENTE
FROM CLIENTES
WHERE CODIGOCLIENTE IN (SELECT CODIGOCLIENTE 
                      FROM PEDIDOS
                      WHERE EXTRACT(YEAR FROM FECHAPEDIDO)= 2008);

/*Ejercicio 4
Visualizar los clientes que residan en la misma ciudad donde hay una oficina, 
indicando dónde está la oficina.*/

SELECT INITCAP(C.NOMBRECLIENTE),O.CIUDAD,O.CODIGOPOSTAL,O.LINEADIRECCION1,O.LINEADIRECCION2
FROM CLIENTES C,OFICINAS O
WHERE C.CIUDAD=O.CIUDAD
ORDER BY O.CIUDAD;

--CON SUBCONSULTA

SELECT NOMBRECLIENTE,CIUDAD
FROM CLIENTES 
WHERE CIUDAD IN (SELECT DISTINCT CIUDAD
                  FROM OFICINAS);
                  
/*Ejercicio 5 
Sacar cuál fue el cliente que hizo el pago con mayor cuantía y 
el que hizo el pago con menor cuantía.*/
SELECT INITCAP(C.NOMBRECLIENTE), P.CANTIDAD
FROM PAGOS P,CLIENTES C
WHERE P.CODIGOCLIENTE=C.CODIGOCLIENTE 
AND( CANTIDAD = (SELECT MAX(CANTIDAD)
                  FROM PAGOS)
OR CANTIDAD = (SELECT MIN(CANTIDAD)
                  FROM PAGOS));  

/*Ejercicio 6  
Añade a la tabla empleados las columnas denominadas salario, numérica de 10 
posiciones, y otra denominada comisión, numérica de 6 posiciones.(SE PUEDE HACER EN UNA SOLA LINEA)*/ 

ALTER TABLE EMPLEADOS ADD SALARIO NUMBER(10);

ALTER TABLE EMPLEADOS ADD COMISION NUMBER(6);

/*Ejercicio 7
Crea un procedimiento almacenado denomiando p7_salari_comi que inserta los 
diferentes valores para el salario dependiendo del puesto que tenga el empleado: 
   a) Si es “Secretaria” el salario será 1100€
   b) Si es “Director Oficina” el salario será 1500 €. 
   c) Si es “Subdirector Marketing” o “Subdirector Ventas” el salario será 1800 €. 
   d) Si es “Representante Ventas” el salario será 1700 €.
   e) Si es “Director General” el salario será 2200 €.
     
Todos los empleados tendrán como valor del campo comisión, 0.*/

SELECT * FROM EMPLEADOS;
DESC EMPLEADOS;

CREATE OR REPLACE PROCEDURE P7_SALARIO_COMI
AS
BEGIN
    UPDATE EMPLEADOS
    SET SALARIO=1100
    WHERE UPPER(PUESTO)='SECRETARIA';

    UPDATE EMPLEADOS
    SET SALARIO=1500
    WHERE UPPER(PUESTO)='DIRECTOR OFICINA';
    
    UPDATE EMPLEADOS
    SET SALARIO=1800
    WHERE UPPER(PUESTO) IN ('SUBDIRECTOR MARKETING','SUBDIRECTOR VENTAS');

    UPDATE EMPLEADOS
    SET SALARIO=1700
    WHERE UPPER(PUESTO)='REPRESENTANTE VENTAS';

    UPDATE EMPLEADOS
    SET SALARIO=2200
    WHERE UPPER(PUESTO)='DIRECTOR GENERAL';     
END;

/*Ejercicio 7.1
El mismo ejercicio que el anterior pero ahora el puesto no lo pasan como parametro*/

CREATE OR REPLACE PROCEDURE P7_SALARIO_COMI
  (P_PUESTO EMPLEADOS.PUESTO%TYPE)
AS
BEGIN
  CASE  
  WHEN P_PUESTO='SECRETARIA' THEN
    UPDATE EMPLEADOS
    SET SALARIO=1100
    WHERE UPPER(PUESTO)='SECRETARIA';
  WHEN P_PUESTO='DIRECTOR OFICINA' THEN
    UPDATE EMPLEADOS
    SET SALARIO=1500
    WHERE UPPER(PUESTO)='DIRECTOR OFICINA';
  WHEN P_PUESTO IN ('SUBDIRECTOR MARKETING','SUBDIRECTOR VENTAS') THEN    
    UPDATE EMPLEADOS
    SET SALARIO=1800
    WHERE UPPER(PUESTO) IN ('SUBDIRECTOR MARKETING','SUBDIRECTOR VENTAS');
  WHEN P_PUESTO='REPRESENTANTE VENTAS' THEN
    UPDATE EMPLEADOS
    SET SALARIO=1700
    WHERE UPPER(PUESTO)='REPRESENTANTE VENTAS';
  WHEN P_PUESTO='DIRECTOR GENERAL' THEN
    UPDATE EMPLEADOS
    SET SALARIO=2200
    WHERE UPPER(PUESTO)='DIRECTOR GENERAL';
  END CASE;  
END;

/*Ejercicio 8
Crear un disparador (trigger) que controle antes de modificar el salario de
un empleado si su salario es superior a 3000. Si es así, su comisión será del 2% 
y si no se será un 5%. Comprueba si funciona modificando a un empleado su salario
a 5000 y después su salario a 2000.  */


CREATE OR REPLACE TRIGGER TRIGGER_MUTANTE_EMPLEADOS
AFTER UPDATE ON EMPLEADOS
FOR EACH ROW
BEGIN
PQ_MUTANTE.V_CODEMP_MUTANTE:=:NEW.CODIGOEMPLEADO;
PQ_MUTANTE.V_SAL_MUTANTE:=:NEW.SALARIO;

END;


CREATE OR REPLACE TRIGGER SALARIO_SUPERA_3000
AFTER
UPDATE OF SALARIO 
ON EMPLEADOS
BEGIN
  IF PQ_MUTANTE.V_SAL_MUTANTE>3000 THEN
  UPDATE EMPLEADOS
  SET COMISION=PQ_MUTANTE.V_SAL_MUTANTE*0.02
  WHERE  CODIGOEMPLEADO=PQ_MUTANTE.V_CODEMP_MUTANTE;
    ELSE
  UPDATE EMPLEADOS
  SET COMISION=PQ_MUTANTE.V_SAL_MUTANTE*0.05
  WHERE CODIGOEMPLEADO=PQ_MUTANTE.V_CODEMP_MUTANTE;
  END IF;
END;
  
select * from empleADOS;

UPDATE EMPLEADOS
SET SALARIO=5000
WHERE UPPER(NOMBRE)='RUBEN';

UPDATE EMPLEADOS
SET SALARIO=2000
WHERE UPPER(NOMBRE)='MARCOS';

update EMPLEADOS
SET SALARIO=2000
WHERE UPPER(NOMBRE)='MARIA';
/*Haz ahora el mismo ejercicio pero cuando insertan una persona*/

DROP TRIGGER INSERTADO_SUPERA_3000;

CREATE OR REPLACE PACKAGE PQ_MUTANTE
IS
V_CODEMP_MUTANTE EMPLEADOS.CODIGOEMPLEADO%TYPE;
V_NOM_MUTANTE EMPLEADOS.NOMBRE%TYPE;
V_AP1_MUTANTE EMPLEADOS.APELLIDO1%TYPE;
V_AP2_MUTANTE EMPLEADOS.APELLIDO2%TYPE;
V_EXT_MUTANTE EMPLEADOS.EXTENSION%TYPE;
V_EMAIL_MUTANTE EMPLEADOS.EMAIL%TYPE;
V_CODOFI_MUTANTE EMPLEADOS.CODIGOOFICINA%TYPE;
V_CODJEFE_MUTANTE EMPLEADOS.CODIGOJEFE%TYPE;
V_PUE_MUTANTE EMPLEADOS.PUESTO%TYPE;
V_SAL_MUTANTE EMPLEADOS.SALARIO%TYPE;
V_COM_MUTANTE EMPLEADOS.COMISION%TYPE;
END;

CREATE OR REPLACE TRIGGER TRIGGER_MUTA_EMPLES_2
AFTER UPDATE ON EMPLEADOS
FOR EACH ROW
BEGIN
PQ_MUTANTE.V_CODEMP_MUTANTE:=:NEW.CODIGOEMPLEADO;
PQ_MUTANTE.V_NOM_MUTANTE:=:NEW.NOMBRE;
PQ_MUTANTE.V_AP1_MUTANTE:=:NEW.APELLIDO1; 
PQ_MUTANTE.V_AP2_MUTANTE:=:NEW.APELLIDO2;
PQ_MUTANTE.V_EXT_MUTANTE:=:NEW.EXTENSION;
PQ_MUTANTE.V_EMAIL_MUTANTE:=:NEW.EMAIL; 
PQ_MUTANTE.V_CODOFI_MUTANTE:=:NEW.CODIGOOFICINA; 
PQ_MUTANTE.V_CODJEFE_MUTANTE:=:NEW.CODIGOJEFE; 
PQ_MUTANTE.V_PUE_MUTANTE:=:NEW.PUESTO; 
PQ_MUTANTE.V_SAL_MUTANTE:=:NEW.SALARIO;
IF PQ_MUTANTE.V_SAL_MUTANTE>3000 THEN
PQ_MUTANTE.V_COM_MUTANTE:=PQ_MUTANTE.V_SAL_MUTANTE*0.02;
ELSE
PQ_MUTANTE.V_COM_MUTANTE:=PQ_MUTANTE.V_SAL_MUTANTE*0.05;
END IF;
END;

CREATE OR REPLACE TRIGGER INSERTADO_SUPERA_3000
AFTER UPDATE OR INSERT
ON EMPLEADOS
BEGIN
  IF UPDATING THEN
    IF PQ_MUTANTE.V_SAL_MUTANTE>3000 THEN
    UPDATE EMPLEADOS
    SET COMISION=PQ_MUTANTE.V_SAL_MUTANTE*0.02
    WHERE CODIGOEMPLEADO=PQ_MUTANTE.V_CODEMP_MUTANTE;
      ELSE
    UPDATE EMPLEADOS
    SET COMISION=PQ_MUTANTE.V_SAL_MUTANTE*0.05
    WHERE CODIGOEMPLEADO=PQ_MUTANTE.V_CODEMP_MUTANTE;
    END IF;
  END IF;  
  IF INSERTING THEN
    INSERT INTO EMPLEADOS VALUES(PQ_MUTANTE.V_CODEMP_MUTANTE,PQ_MUTANTE.V_NOM_MUTANTE,PQ_MUTANTE.V_AP1_MUTANTE,PQ_MUTANTE.V_AP2_MUTANTE,PQ_MUTANTE.V_EXT_MUTANTE,PQ_MUTANTE.V_EMAIL_MUTANTE,PQ_MUTANTE.V_CODOFI_MUTANTE,PQ_MUTANTE.V_CODJEFE_MUTANTE,PQ_MUTANTE.V_PUE_MUTANTE,PQ_MUTANTE.V_SAL_MUTANTE,PQ_MUTANTE.V_COM_MUTANTE);
  END IF;
END;

DESC EMPLEADOS;

INSERT INTO EMPLEADOS VALUES('34','Jorge','Ortiz','Perez','7564','algosinmas','TAL-ES','2','Director general','2000',0);

/*9. Crea un trigger que cuando se borre una oficina cambie en la tabla empleados
aquellos cuyo código de oficina es la de la oficina borrada. En los empleados se pondrá la cadena ‘SIN’
Comprueba que funciona correctamente.*/
DROP TRIGGER TRIGGER_CAMBIO_OFICINA;

CREATE OR REPLACE TRIGGER TRIGGER_CAMBIO_OFICINA
BEFORE DELETE
ON OFICINAS
FOR EACH ROW
BEGIN 
  UPDATE EMPLEADOS
  SET CODIGOOFICINA='SIN'
  WHERE UPPER(CODIGOOFICINA) = UPPER(:OLD.CODIGOOFICINA);
END;

SELECT * FROM EMPLEADOS  WHERE UPPER(CODIGOOFICINA)=('TOK-JP'); 
SELECT * FROM EMPLEADOS  WHERE UPPER(CODIGOOFICINA)=('SIN');  
SELECT * FROM OFICINAS  WHERE UPPER(CODIGOOFICINA)=('TOK-JP');  

DELETE FROM OFICINAS WHERE UPPER(CODIGOOFICINA)=('TOK-JP');  
  
ALTER TABLE EMPLEADOS DISABLE CONSTRAINT  EMPLE_OFICINASFK;

ROLLBACK 


